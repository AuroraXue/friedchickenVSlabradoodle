y2 <- carOffers%>%filter(age=="Middle")%>%select(price)
qqnorm(y2$price,main="Normal Q-Q Plot for Middle Age Group")
qqline(y2$price)
y3 <- carOffers%>%filter(age=="Elderly")%>%select(price)
qqnorm(y3$price,main="Normal Q-Q Plot for Elderly Age Group")
qqline(y3$price)
pairwise.t.test(carOffers$age,carOffers$price,pool.sd = TRUE,p.adjust.method = "bonf")
pairwise.t.test(carOffers$price,carOffers$age, pool.sd = TRUE,p.adjust.method = "bonf")
pairwise.t.test(carOffers$price,carOffers$age, pool.sd = TRUE,p.adjust.method = "bonf")
fit <- aov(carOffers$price~carOffers$age)
TukeyHSD(fit)
x = 0:0.01:1
x
x = seq(0,1,100)
x
x = seq(0,1,length=100)
length(x)
x
y = x^20
plot(x,y)
pt(1)
pt(1,19)
2*(1-pt(1,19))
install.packages("cowplot")
install.packages("cowplot")
install.packages("cowplot", repos="http://cran.r-project.org/")
devtools::install_github("wilkelab/cowplot")
updateR
updateR()
install.packages("installr")
require(devtools)
install_github('andreacirilloac/updateR')
updateR()
updateR::updateR()
updateR::updateR(admin_password = 'reinhard970907')
updateR::updateR(admin_password = 'reinhard970907')
R.version()
R.version
R.version
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
library(shiny)
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip"))
devtools::install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggmap")) devtools::install_github("dkahle/ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggmap")) devtools::install_github("dkahle/ggmap")
library(ggmap)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(devtools)
install_version("ggplot2", version = "2.1.0", repos = "http://cran.us.r-project.org")
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
shiny::runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
runApp('Documents/Spring2017/GR5243/MyPrjs/Project2_OpenData/app')
install.packages('leaflet')
runApp('Documents/Spring2017/GR5243/MyPrjs/Project2_OpenData/app')
install.packages('rgdal')
runApp('Documents/Spring2017/GR5243/MyPrjs/Project2_OpenData/app')
runApp('Documents/Spring2017/GR5243/MyPrjs/Project2_OpenData/app')
f.likelihood <- function(n,y,pi){
l <- choose(n,y)*pi^y*(1-pi)^(n-y)
return(l)
}
p <- seq(0,1,by=0.01)
l <- f.likelihood(20,10,p)
plot(pi,l)
l
pi
p
plot(p,l)
plot(p,l)
l <- f.likelihood(20,19,p)
plot(p,l)
l <- f.likelihood(20,18,p)
plot(p,l)
l <- f.likelihood(20,20,p)
plot(p,l)
qchisq(0.95,1)
1-pchisq(20,1)
3.84/20
1-0.192
1/1.192
1/0.808
log(0.5)*(-40)
1-pchisq(7.7,1)
23.84*(-0.5)
23.84*(-0.5)/20
exp(-0.596)
exp(-1.92/20)
exp(log(0.05)/20)
lamb <- seq(-5,5,by=0.01)
lamb <- seq(0.0001,5,by=0.01)
plot(lamb,log(lamb))
plot(lamb,log(lamb),type = "l",col="green")
lines(lamb,lamb+0.95,col="red")
lamb <- seq(0.0001,30,by=0.01)
plot(lamb,log(lamb),type = "l",col="green")
lines(lamb,lamb+0.95,col="red")
shiny::runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
shiny::runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
library(plyr)
runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
shiny::runApp('Documents/Spring2017/GR5243/MyPrjs/Spr2017-proj2-grp12/app')
152*log(0.6611)+70*log(0.152)-152*log(0.6609)-33*log(0.1435)-37*log(0.1609)
(152*log(0.6611)+70*log(0.152)-152*log(0.6609)-33*log(0.1435)-37*log(0.1609))*(-2)
pchisq(0.32,1)
1-pchisq(0.32,1)
1-pchisq(0.32,2)
mu.a <- 5
mu.b <- 9
mu <- 7
a <- c(8,7,6,6,3,4,7,2,3,4)
b <- c(9,9,8,14,8,13,11,5,7,6)
mean(a)
mean(b)
mean(c(a,b))
exp(-mu.a)*a^mu.a
prod(exp(-mu.a)*a^mu.a)
prod(exp(-mu.a)*a^mu.a)/prod(exp(-mu)*c(a,b)^mu)*prod(exp(-mu.b)*b^mu.b)
l = prod(exp(-mu.a)*a^mu.a)/prod(exp(-mu)*c(a,b)^mu)*prod(exp(-mu.b)*b^mu.b)
-2*log(l)
prod(exp(-mu.b)*b^mu.b)
prod(exp(-mu.b)*(b^mu.b))
sum(-mu.a+mu.a*log(a))
sum(-mu.a+mu.a*log(a))+sum(-mu.b+mu.b*log(b))
sum(-mu+mu*log(c(a,b)))
c(a,b)
log(c(a,b))
log(c(a,b))*mu
log(c(a,b))*mu-mu
sum(log(c(a,b))*mu-mu)
sum(-mu.b+mu.b*log(b))
sum(-mu.a+mu.a*log(a))+sum(-mu.b+mu.b*log(b))-sum(-mu+mu*log(c(a,b)))
sum(-mu.a+mu.a*log(a))+sum(-mu.b+mu.b*log(b))-sum(-mu+mu*log(c(a,b)))*2
matrix(c(1,2,3,4),2,2)
matrix(c(140,90,90,90),2,2)
J <- matrix(c(140,90,90,90),2,2)
J
solve(J)
pt(3.3324,1)
pchisq(25.1384,1)
pnorm(3.3324)
log(1.8)-1.96*sqrt(0.03111111)
log(1.8)+1.96*sqrt(0.03111111)
exp(0.2420752)
exp(0.9334982)
wafer.imperf <- data.frame(imperfection=c(8,7,6,6,3,4,7,2,3,4,9,9,8,14,8,13,11,5,7,6),is.B=c(rep(0,10),rep(1,10)))
wafer.imperf
wafer.imperf <- data.frame(imperfection=c(8,7,6,6,3,4,7,2,3,4,9,9,8,14,8,13,11,5,7,6),is.B=factor(c(rep(0,10),rep(1,10))))
wafer.imperf
fit <- glm(imperfection~is.B,data = wafer.imperf,family=binomial(link='logit'))
fit <- glm(imperfection~is.B,data = wafer.imperf,family=poisson(link='log'))
summary(fit)
log(1.8)
fit$coefficients
fit$coefficients[2]
fit$coefficients[[2]]
exp(fit$coefficients[[2]])
exp(fit$coefficients[[2]]) - mean(wafer.imperf$imperfection[11:20])/mean(wafer.imperf$imperfection[1:10])
fit0 <- glm(imperfection~1,data = wafer.imperf,family = poisson(link = 'log'))
summary(fit0)
anova(fit0,fit)
pchisq(11.589,1)
3.332*3.332
fit$effects
fit$coefficients
fit$residuals
fit$fitted.values
fit$R
fit$rank
fit$qr
fit$terms
confint(fit)
exp(confint(fit))
prod(exp(-mu)*c(a,b)^mu)/(prod(exp(-mu.b)*b^mu.b)*prod(exp(-mu.a)*a^mu.a))
log(prod(exp(-mu)*c(a,b)^mu)/(prod(exp(-mu.b)*b^mu.b)*prod(exp(-mu.a)*a^mu.a)))
-2*log(prod(exp(-mu)*c(a,b)^mu)/(prod(exp(-mu.b)*b^mu.b)*prod(exp(-mu.a)*a^mu.a)))
3.3324^2
0.5^20/((5/14)^10*(9/14)^10)
prod(0.5^(a+b))
prod(0.5^(a+b))/(prod((5/14)^a)*prod((9/14)^b))
-2*log(prod(0.5^(a+b))/(prod((5/14)^a)*prod((9/14)^b)))
df = data.frame(a=c(1,2,3),b=c(2,5,6))
df
df[df$a==c(1,2)]
df[df$a%in%c(1,2)]
df[df$a %in% c(1,2)]
library(dplyr)
df%>%filter(a %in% c(1,2))
setwd('/Users/Zoe/Documents/Spring2017/GR5243/MyPrjs/spr2017-proj3-group3/lib/')
library(dplyr)
library(data.table)
df <- fread('../data/cnn_features_150.csv')
df <- tbl_df(df)
df
df <- t(df)
df
df$image = rownames(df)
df
df <- df %>% setDT(keep.rownames=FALSE)[]
df <- setDT(df,keep.rownames=FALSE)[]
rownames(df)
df <- fread('../data/cnn_features_150.csv')
df <- fread('../data/cnn_features_150.csv')
df <- t(df)
df <- setDT(df,keep.rownames=TRUE)[]
df <- fread('../data/cnn_features_150.csv')
rownames(df)
df
df <- fread('../data/cnn_features_150.csv')
head(df)
dim(df)
df <- t(df)
head(df)
dim9df
dim(df)
rownames(df)
df$image <- list(rownames(df))
df$image
df
dim(df)
df <- fread('../data/cnn_features_150.csv')
df <- t(df)
image <- rownames(df)
df <- cbind(image=image,df)
dim(df)
test_imgs <- fread('../output/prediction_inceptionV3.csv')
test_imgs <- test_imgs$image
test_df <- df%>%filter(image %in% test_imgs)
list(test_imgs)
test_df <- df%>%filter(image %in% list(test_imgs))
df$image
dim(df)
typeof(dim)
df <- fread('../data/cnn_features_150.csv')
df <- t(df)
image <- rownames(df)
df <- cbind(image=image,df)
df
df <- fread('../data/cnn_features_150.csv')
df
df <- t(df)
df
image <- rownames(df)
df <- df%>%mutate(image=rownames(df))
df <- fread('../data/cnn_features_150.csv')
df <- t(df)
df
image <- rownames(df)
df <- df%>%mutate(image=rownames(df))
dim(df)
dim(image)
typeof(image)
class(image)
image[0]
image <- as.list(image)
image[0]
image[[0]]
dim(image)
length(image)
image[1]
image[2]
df <- fread('../data/cnn_features_150.csv')
df <- t(df)
image <- rownames(df)
df <- df%>%mutate(image=as.list(rownames(df)))
image <- as.list(image)
image[1]
a <- data.frame(img = image)
a
dim(a)
df <- fread('../data/cnn_features_150.csv')
df <- t(df)
image <- rownames(df)
image <- data.frame(as.list(image))
df <- cbind(df,image)
dim(df)
df <- fread('../data/cnn_features_150.csv')
df <- t(df)
image <- rownames(df)
image <- t(data.frame(as.list(image)))
df <- cbind(df,image)
dim(df)
head(df)
df <- fread('../data/cnn_features_150.csv')
df <- t(df)
image <- rownames(df)
image <- t(data.frame(as.list(image),stringsAsFactors = FALSE))
df <- cbind(df,image)
dim(df)
head(df)
df <- fread('../data/cnn_features_150.csv')
df <- t(df)
image <- rownames(df)
image <- t(data.frame(as.list(image),stringsAsFactors = FALSE))
df <- cbind(df,image,stringsAsFactors = FALSE)
head(df)
df[, 1:150] <- sapply(df[, 1:150], as.numeric)
head(df)
df <- fread('../data/cnn_features_150.csv')
df <- t(df)
image <- rownames(df)
image <- t(data.frame(as.list(image)))
df <- cbind(df,image)
df[, 1:150] <- sapply(df[, 1:150], as.numeric)
head(df)
df <- fread('../data/cnn_features_150.csv',stringsAsFactors = FALSE)
df <- t(df)
image <- rownames(df)
image <- t(data.frame(as.list(image)))
df <- cbind(df,image)
head(df)
df[, 1:150] <- sapply(df[, 1:150], as.character)
df[, 1:150] <- sapply(df[, 1:150], as.numeric)
head(df)
df[,1]
df[,5]
df <- fread('../data/cnn_features_150.csv',stringsAsFactors = FALSE)
df <- t(df)
dim(df)
test_df <- df%>%filter(rownames() %in% list(test_imgs))
test_df <- df[rownames(df)%in%test_imgs,]
dim(test_df)
head(test_df)
train_df <- df[-rownames(df)%in%test_imgs,]
train_df <- df[-(rownames(df)%in%test_imgs),]
dim(train_df)
a <- rownames(df)%in%test_imgs
dim(a)
a
-a
!a
train_df <- df[!(rownames(df)%in%test_imgs),]
dim(train_df)
labels <- fread('../data/labels.csv')
dim(labels)
labels
df$label <- labels
df
cbind(df,labels)
df
df <- fread('../data/cnn_features_150.csv',stringsAsFactors = FALSE)
df <- t(df)
labels <- fread('../data/labels.csv')
df$label <- labels$V1
dim(df)
labels$V1
df
class(df)
class(labels)
df <- fread('../data/cnn_features_150.csv',stringsAsFactors = FALSE)
df <- t(df)
class(df)
df <- data.frame(df)
dim(df)
class(df)
df
labels <- fread('../data/labels.csv')
df$label <- labels$V1
head(df)
df$image <- rownames(df)
head(df)
test_imgs <- fread('../output/prediction_inceptionV3.csv')
test_imgs <- test_imgs$image
test_df <- df[rownames(df)%in%test_imgs,]
train_df <- df[!(rownames(df)%in%test_imgs),]
df$label <- factor(labels$V1)
head(df)
test_imgs <- fread('../output/prediction_inceptionV3.csv')
test_imgs <- test_imgs$image
test_df <- df[rownames(df)%in%test_imgs,]
train_df <- df[!(rownames(df)%in%test_imgs),]
a <- data.frame(b=c(1,2,3),d=c('1','2','3'))
a
a[,1]
a[,1:2]
k <- 150
fpath <- '../data/cnn_features_150.csv'
df <- fread(fpath,stringsAsFactors = FALSE)
df <- t(df)
df <- data.frame(df)
labels <- fread('../data/labels.csv')
df$label <- factor(labels$V1)
df$image <- rownames(df)
test_imgs <- fread('../output/prediction_inceptionV3.csv')
test_imgs <- test_imgs$image
test_df <- df[rownames(df)%in%test_imgs,]
train_df <- df[!(rownames(df)%in%test_imgs),]
Sys.time()
s1 = system.time()
s1=Sys.time()
s2=Sys.time()
s2-s1
start <- Sys.time()
logistic.fit <- glm(label ~ ., data = train_df[,1:k], family = "binomial")
logistic.fit <- glm(label ~ ., data = train_df[,c(1:k,'label')], family = "binomial")
logistic.fit <- glm(label ~ ., data = train_df[,c(1:k,152)], family = "binomial")
head(train_df)
head(df)
test_df <- df[rownames(df)%in%test_imgs,]
train_df <- df[!(rownames(df)%in%test_imgs),]
head(train_df)
dim(train_df)
train_df
head(train_df)
logistic.fit <- glm(label ~ ., data = train_df[,c(1:k+1)], family = "binomial")
summarise(logistic.fit)
summary(logistic.fit)
preds <- predict(logistic.fit,newdata = test_df,type = 'response')
class(preds)
length(preds)
summary(preds)
labradoodle_preds <- predict(logistic.fit,newdata = test_df,type = 'response')
friedChicken_preds <- 1 - labradoodle_preds
summary(friedChicken_preds)
output <- data.frame(image=test_df$image,labradoodle=labradoodle_preds,friedChicken=friedChicken_preds)
head(output)
foutput <- '../output/prediction_logisticRegression_cnn150.csv'
fwrite(output,foutput)
t1 = end -start
library(dplyr)
library(gbm)
install.packages('gbm')
X <- as.matrix(train_df[,1:150])
dim(x)
dim(x)
dim(X)
y <- train_df$label
library('gbm')
depth = 1
shrinkage = 0.03
n.trees = 250
gbm_fit <- gbm.fit(X,y,distribution = 'bernoulli',n.trees = n.trees,interaction.depth = depth,shrinkage = shrinkage,bag.fraction = 0.7,verbose = FALSE)
predict(gbm_fit,as.matrix(test_df[,1:150]),type = 'response')
predict(gbm_fit,as.matrix(test_df[,1:150]),type = 'response',n.trees = n.trees)
newd = as.matrix(test_df[,1:150])
dim(newd)
class(newd)
class(X)
predict(gbm_fit,newdata = newd,type = 'response',n.trees = n.trees)
summary(gbm_fit)
gbm_fit
gbm.perf(gbm_fit)
train_df$label
gbm_fit <- gbm(label~ ., data = trainD[,1:151],interaction.depth = depth, n.trees = n.trees, shrinkage = shrinkage)
gbm_fit <- gbm(label~ ., data = train_df[,1:151],interaction.depth = depth, n.trees = n.trees, shrinkage = shrinkage)
predict(gbm_fit,newdata = test_df[,1:151],type = 'response',n.trees = n.trees)
summary(gbm_fit)
gbm_fit$train.error
train_df$label <- as.numeric(train_df$label)
train_df$label
gbm_fit <- gbm(label~ ., data = train_df[,1:151],interaction.depth = depth, n.trees = n.trees, shrinkage = shrinkage)
train_df$label <- as.numeric(train_df$label)-1
train_df$label
gbm_fit <- gbm(label~ ., data = train_df[,1:151],interaction.depth = depth, n.trees = n.trees, shrinkage = shrinkage)
gbm_fit$train.error
predict(gbm_fit,newdata = test_df[,1:151],type = 'response',n.trees = n.trees)
source('~/Documents/Spring2017/GR5243/MyPrjs/spr2017-proj3-group3/train_bl.R')
gbm1 <- train_bl(train_df)
predict(gbm1,newdata = test_df[,1:151],type = 'response',n.trees = n.trees)
