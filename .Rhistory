test_ids <- fread("output/prediction_inceptionV3.csv")
label <- fread("data/labels.csv")
label$V1 <- as.numeric(label$V1)
dataset <- fread(fpath)
dataset <- data.frame(t(dataset))
dataset$label <- label$V1
file_rowname <- rownames(dataset)
value <- "jpg"
if(grepl(value, file_rowname[1])){
dataset$image <- rownames(dataset)
} else{
dataset$image <- paste(rownames(dataset),".jpg", sep = "")
}
test_data <- dataset %>% filter(dataset$image %in% test_ids$image)
return(test_data)
}
test_data <- process.test(fpath)
test_data <- process.test('data/sift_features.csv')
test_data <- process.test('data/cnn_features.csv')
source('test.R')
base.test.data <- process.test(baseline_train_features)
adv.test.data <- process.test(advanced_train_features)
n.bl.features <- 5000
n.adv.features <- 150
base.test.pred <- test(gbm_fit,base.test.data,n.bl.features)
adv.test.pred <- test(svm_fit,adv.test.data,n.adv.features)
tm_bl_pred <- NA
tm_bl_pred <- system.time(base.test.pred <- test(gbm_fit,base.test.data,n.bl.features))
tm_bl_pred
tm_pred_test <- system.time(adv.test.pred <- test(svm_fit,adv.test.data,n.adv.features))
tm_pred_test
tm_adv_pred <- NA
tm_adv_pred <- system.time(adv.test.pred <- test(svm_fit,adv.test.data,n.adv.features))
acc.bl <- sum(base.test.pred==base.test.data$label)
294/400
acc.bl <- sum(base.test.pred==base.test.data$label)/dim(base.test.data)[1]
acc.adv <- sum(adv.test.pred==adv.test.data$label)/dim(adv.test.data)[1]
print('1')
print(paste('baseline model accuracy is ',str(acc.bl)))
acc.adv
str(acc.bl)
cat('baseline model accuracy is ',str(acc.bl))
cat('baseline model accuracy is ',acc.bl)
cat('baseline model accuracy is ',acc.bl,';')
cat('baseline model accuracy is',acc.bl,';\nadvanced model accuracy is',acc.adv)
cat('baseline model accuracy is',acc.bl,';\nadvanced model accuracy is',acc.adv,'.')
cat('baseline model accuracy is',acc.bl,'\nadvanced model accuracy is',acc.adv)
source('test.R')
adv.test.data <- split.train(advanced_train_features)
tm_adv_pred <- system.time(adv.test.pred <- test(svm_fit,adv.test.data,n.adv.features))
acc.adv <- sum(adv.test.pred==adv.test.data$label)/dim(adv.test.data)[1]
process.test <- function(fpath){
test.data <- fread(fpath)
test.data <- data.frame(t(test.data))
test.data$image <- rownames(test.data)
}
test.data <- process.test('data/cnn_features_150.csv')
process.test <- function(fpath){
test.data <- fread(fpath)
test.data <- data.frame(t(test.data))
test.data$image <- rownames(test.data)
return(test.data)
}
test.data <- process.test('data/cnn_features_150.csv')
tm_adv_pred <- system.time(adv.test.pred <- test(svm_fit,adv.test.data,n.adv.features))
acc.adv <- sum(adv.test.pred==adv.test.data$label)/dim(adv.test.data)[1]
tm_adv_pred <- system.time(adv.test.pred <- test(svm_fit,test.data,n.adv.features))
adv.test.pred==c(rep(0,1000),rep(1,1000))
sum(adv.test.pred==c(rep(0,1000),rep(1,1000)))/2000
adv.test.data$image
fpath
fpath <- 'data/cnn_features.csv'
features <- fread(fpath,stringsAsFactors = FALSE)
features <- data.frame(t(features))
features$image <- rownames(features)
head(features)
features[1:5,2045:2049]
advanced_train_features
advanced_train_features <- 'data/cnn_features.csv'
n.features <- 2048
tm_advanced_train <- NA
tm_advanced_train1 <- system.time(svm_fit <- svm_adv(advanced_train_features,n.features,run.cv))
tm_advanced_train1
tm_baseline_train
svm_fit
n.adv.features <- 2048
advanced_train_features
adv.test.data <- split.train(advanced_train_features)
tm_adv_pred <- NA
tm_adv_pred <- system.time(adv.test.pred <- test(svm_fit,adv.test.data,n.adv.features))
acc.adv <- sum(adv.test.pred==adv.test.data$label)/dim(adv.test.data)[1]
acc.adv
cat('baseline model accuracy is',acc.bl,'\nadvanced model accuracy is',acc.adv)
fpath
n.features = 150
features <- fread(fpath,stringsAsFactors = FALSE)
features <- data.frame(t(features))
test_ids <- fread("output/prediction_inceptionV3.csv")
img_ids <- rownames(features)
value <- "jpg"
if(grepl(value, img_ids[1])){
features$image <- rownames(features)
} else{
features$image <- paste(rownames(features),".jpg", sep = "")
}
test.features <- features %>% filter(features$image %in% test_ids$image)
train.features <- features %>% filter(!features$image %in% test_ids$image)
n.features
features <- fread(fpath,stringsAsFactors = FALSE)
features <- data.frame(t(features))
n <- dim(features)[2]
prin_comp <- prcomp(train.features[,1:n],scale. = T)
head(train.features[,1:n])
head(train.features[2:2000,1:n])
train.features[1:5,2044:2048]
features <- fread(fpath,stringsAsFactors = FALSE)
features <- data.frame(t(features))
n <- dim(features)[2]
test_ids <- fread("output/prediction_inceptionV3.csv")
img_ids <- rownames(features)
value <- "jpg"
if(grepl(value, img_ids[1])){
features$image <- rownames(features)
} else{
features$image <- paste(rownames(features),".jpg", sep = "")
}
test.features <- features %>% filter(features$image %in% test_ids$image)
train.features <- features %>% filter(!features$image %in% test_ids$image)
train.features[1:5,2044:2048]
features[1:5,2044:2048]
fpath
features <- data.frame(t(features))
features <- fread(fpath,stringsAsFactors = FALSE)
features <- data.frame(t(features))
features[1:5,2044:2048]
features[1:5,1:5]
df <- features
a <- df - colMeans(df)
a[1:5,1:5]
colMeans(df)
colMeans(df)[1]
df[1,1]
mean(df[,1])
df[1500:1505,1]
df[2000:2005,1]
summary(df[,1])
df[,1][df[,1]>1]
which.max(df[,1])
df[309,1]
df[308,1]
df[311,1]
which.max(df[,2])
which.min(df[,2])
which.max(df[,3])
which.min(df[,3])
df[247,3]
df[357,3]
mean(df[,3])
summary(df[,3])
df[1:5,1:5]
summary(df[,4])
which.max(df[,4])
df[1233,4]
sd(df[,1])
sd(df[,4])
sd(df)
apply(df,2,sd)
sds <- apply(df,2,sd)
summary(sds)
sds[sds==0]
dim(sds[sds!=0])
length(sds[sds!=0])
df[1:5,10]
train_sd = apply(train.features,2,sd)
train_sd = apply(train.features[,1:n],2,sd)
n
train_sd[train_sd==0]
length(train_sd[train_sd!=0])
train.sd <- apply(train.features[,1:n],2,sd)
train.pca <- train.features[,1:n][,train.sd!=0]
prin_comp <- prcomp(train.pca,scale. = T)
prin_comp$center
prin_comp$scale
prin_comp$rotation[1:5,1:4]
prin_comp$rotation[5:11,1:4]
dim(prin_comp$x)
biplot(prin_comp,scale = 0)
biplot(prin_comp,scale = 0)
std_dev <- prin_comp$sdev
pr_var <- std_dev^2
pr_var[1:10]
sum(pr_var)
sum(pr_var[1:10])
sum(pr_var[1:150])
sum(pr_var[1:250])
sum(pr_var[1:350])
sum(pr_var[1:450])
sum(pr_var[1:1000])
2013*0.9
prop_varex <- pr_var/sum(pr_var)
prop_varex[1:20]
plot(prop_varex,xlab = 'Principal Component',ylab = 'Proportion of Variance Explained',type = 'b')
sum(pr_var[1:150])
sum(pr_var[1:250])
sum(pr_var[1:300])
sum(pr_var[1:350])
sum(pr_var[1:350])/2013
sum(pr_var[1:450])/2013
dim(prin_comp$x)
n.features=350
reduced.train <- data.frame(image=train.features$image,prin_comp$x[,1:n.features])
test.pca <- test.features[,1:n][,train.sd!=0]
reduced.test <- predict(prin_comp,newdata = test.pca)
dim(reduced.test)
reduced.test <- as.data.frame(reduced.test)
reduced.test <- reduced.test[,1:n.features]
reduced.train[1:5,1:5]
reduced.test <- data.frame(image=test.features$image,reduced.test)
reduced.test[1:5,1:5]
reduced.data <- rbind(reduced.train,reduced.test)
reduced.data[1:5,1:5]
reduced.data <- reduced.data[order(reduced.data[,1]),]
reduced.data[1:5,1:5]
reduced.data[,1]
reduced.data <- reduced.data %>% arrange(image)
reduced.data[1:5,1:5]
reduced.data[,1]
reduced.data <- rbind(reduced.train,reduced.test)
reduced.data$image <- as.character(reduced.data$image)
reduced.data$image
reduced.data <- reduced.data %>% arrange(image)
reduced.data[1:5,1:5]
df <- data.frame(t(reduced.data))
df[1:5,1:5]
reduced.data <- data.frame(t(reduced.data))
reduced.data[1:5,1:5]
fwrite(reduced.data,file = 'data/cnn_features_350.csv',row.names = F,col.names = F)
df <- fread('data/cnn_features_350.csv')
df[1:5,1:5]
df1 <- fread('data/cnn_features_150.csv')
df1[1:5,1:5]
n.features <- 350
tm_advanced_train <- NA
#setwd('/Users/Zoe/documents/spring2017/gr5243/MyPrjs/spr2017-proj3-group3/')
setwd('./')
baseline_train_features <- 'data/sift_features.csv'
advanced_train_features <- 'data/cnn_features_350.csv'
train_labels <- 'data/labels.csv'
test_img_dir <- 'data/new_images/'
test_sift_features <- 'data/test_sift_features.csv'
test_cnn_features <- 'data/test_cnn_features.csv'
n.features <- 350
tm_advanced_train <- NA
tm_advanced_train1 <- system.time(svm_fit <- svm_adv(advanced_train_features,n.features,run.cv))
save(svm_fit,file = 'output/svmModel.RData')
# tm_advanced_train2 <- system.time(rf_fit <- rf_adv(advanced_train_features,k,run.cv))
# save(rf_fit,'output/rfModel.RData')
n.adv.features <- 350
adv.test.data <- split.train(advanced_train_features)
tm_adv_pred <- NA
tm_adv_pred <- system.time(adv.test.pred <- test(svm_fit,adv.test.data,n.adv.features))
acc.adv <- sum(adv.test.pred==adv.test.data$label)/dim(adv.test.data)[1]
acc.adv
dim(adv.test.data)
library(ggplot2)
plot(adv.test.data[,1],adv.test.data[,2])
colnames(adv.test.data)
ggplot(adv.test.data, aes(x=X1, y=X2, color=label)) + geom_point()
ggplot(adv.test.data, aes(x=X1, y=X2, color=label)) + geom_point(alpha=0.5)
ggplot(adv.test.data, aes(x=X1, y=X2, color=label)) + geom_point(alpha=0.7)
ggplot(adv.test.data, aes(x=X1, y=X2, color=factor(label))) + geom_point(alpha=0.7)
base.test.data <- split.train(baseline_train_features)
ggplot(base.test.data, aes(x=X1, y=X2, color=factor(label))) + geom_point(alpha=0.7)
selectFeatures <- function(fpath,save.path,n.features=350){
# process data
features <- fread(fpath,stringsAsFactors = FALSE)
features <- data.frame(t(features))
n <- dim(features)[2]
# format of image names in test_ids and features rownames should be the same
test_ids <- fread("output/prediction_inceptionV3.csv")
img_ids <- rownames(features)
value <- "jpg"
if(grepl(value, img_ids[1])){
features$image <- rownames(features)
} else{
features$image <- paste(rownames(features),".jpg", sep = "")
}
# split into training and test sets
test.features <- features %>% filter(features$image %in% test_ids$image)
train.features <- features %>% filter(!features$image %in% test_ids$image)
# fit a pca model on training data
# remove columns where sd is 0
train.sd <- apply(train.features[,1:n],2,sd)
train.pca <- train.features[,1:n][,train.sd!=0]
test.pca <- test.features[,1:n][,train.sd!=0]
prin_comp <- prcomp(train.pca,scale. = T)
reduced.train <- data.frame(image=train.features$image,prin_comp$x[,1:n.features])
# transform test data into the new space by trained matrix
reduced.test <- predict(prin_comp,newdata = test.pca)
reduced.test <- as.data.frame(reduced.test)
reduced.test <- reduced.test[,1:n.features]
reduced.test <- data.frame(image=test.features$image,reduced.test)
# combine training and test data
reduced.data <- rbind(reduced.train,reduced.test)
reduced.data$image <- as.character(reduced.data$image)
reduced.data <- reduced.data %>% arrange(image)
reduced.data <- data.frame(t(reduced.data))
# save new features into save.path, same as advanced_train_features
fwrite(reduced.data,file = save.path,row.names = F,col.names = F)
}
save.path <- 'data/sift_features_try.csv'
fpath
fpath <- 'data/sift_features.csv'
features <- fread(fpath,stringsAsFactors = FALSE)
features <- data.frame(t(features))
n <- dim(features)[2]
test_ids <- fread("output/prediction_inceptionV3.csv")
img_ids <- rownames(features)
value <- "jpg"
if(grepl(value, img_ids[1])){
features$image <- rownames(features)
} else{
features$image <- paste(rownames(features),".jpg", sep = "")
}
test.features <- features %>% filter(features$image %in% test_ids$image)
train.features <- features %>% filter(!features$image %in% test_ids$image)
train.sd <- apply(train.features[,1:n],2,sd)
length(train.sd==0)
n
sum(train.sd==0)
train.pca <- train.features[,1:n][,train.sd!=0]
test.pca <- test.features[,1:n][,train.sd!=0]
prin_comp <- prcomp(train.pca,scale. = T)
reduced.train <- data.frame(image=train.features$image,prin_comp$x[,1:n.features])
reduced.test <- predict(prin_comp,newdata = test.pca)
reduced.test <- as.data.frame(reduced.test)
reduced.test <- reduced.test[,1:n.features]
reduced.test <- data.frame(image=test.features$image,reduced.test)
reduced.data <- rbind(reduced.train,reduced.test)
reduced.data$image <- as.character(reduced.data$image)
std_dev <- prin_comp$sdev
pr_var <- std_dev^2
sum(pr_var)
prop_varex <- pr_var/sum(pr_var)
sum(prop_varex[1:1000])
sum(prop_varex[1:1200])
plot(prop_varex, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
sum(prop_varex[1:1100])
n.features=1100
reduced.train <- data.frame(image=train.features$image,prin_comp$x[,1:n.features])
reduced.test <- predict(prin_comp,newdata = test.pca)
reduced.test <- as.data.frame(reduced.test)
reduced.test <- reduced.test[,1:n.features]
reduced.test <- data.frame(image=test.features$image,reduced.test)
reduced.data <- rbind(reduced.train,reduced.test)
reduced.data$image <- as.character(reduced.data$image)
reduced.data <- reduced.data %>% arrange(image)
reduced.data <- data.frame(t(reduced.data))
reduced.data[1:5,1:5]
save.path
save.path <- 'data/sift_features_1100.csv'
fwrite(reduced.data,file = save.path,row.names = F,col.names = F)
n.features <- 1100
baseline_train_features
baseline_train_features <- 'data/sift_features_1100.csv'
tm_baseline_train <- system.time(gbm_fit <- train_bl(baseline_train_features,run.evaluation,n.features,K,run.cv))
gbm_fit
n.bl.features=1100
base.test.data <- split.train(baseline_train_features)
tm_bl_pred <- system.time(base.test.pred <- test(gbm_fit,base.test.data,n.bl.features))
acc.bl <- sum(base.test.pred==base.test.data$label)/dim(base.test.data)[1]
sift.feature <- fread('data/sift_features_1100.csv')
pwd
getwd()
getwd()
sift.feature <- fread('../data/sift_features_1100.csv')
cnn.feature <- fread('../data/cnn_features_350.csv')
sift.feature <- data.frame(t(sift.feature))
cnn.feature <- data.frame(t(cnn.feature))
label
sift.feature$label <- c(rep(0,1000),rep(1,1000))
cnn.feature$label <- c(rep(0,1000),rep(1,1000))
cnn.feature[1:5,1:5]
ggplot(cnn.feature, aes(x=X1, y=X2, color=factor(label))) + geom_point(alpha=0.7)
ggplot(cnn.feature, aes(x=X2, y=X3, color=factor(label))) + geom_point(alpha=0.7)
ggplot(cnn.feature, aes(x=X3, y=X4, color=factor(label))) + geom_point(alpha=0.7)
ggplot(cnn.feature, aes(x=X1, y=X4, color=factor(label))) + geom_point(alpha=0.7)
ggplot(cnn.feature, aes(x=X1, y=X3, color=factor(label))) + geom_point(alpha=0.7)
ggplot(cnn.feature, aes(x=X2, y=X4, color=factor(label))) + geom_point(alpha=0.7)
ggplot(cnn.feature, aes(x=X2, y=X5, color=factor(label))) + geom_point(alpha=0.7)
ggplot(cnn.feature, aes(x=X2, y=X3, color=factor(label))) + geom_point(alpha=0.7)
p1 <- ggplot(cnn.feature, aes(x=X2, y=X3, color=factor(label)))+
geom_point(alpha=0.7) +
ggtitle('CNN Features')
p2 <- ggplot(sift.feature, aes(x=X2, y=X3, color=factor(label)))+
geom_point(alpha=0.7) +
ggtitle('SIFT Features')
multiplot(p1,p2,cols=2)
source('../lib/multiplot.R')
multiplot(p1,p2,cols=2)
p1 <- ggplot(cnn.feature, aes(x=X2, y=X3, color=factor(label)))+
geom_point(alpha=0.7) +
coord_fixed(ratio = 0.5) +
ggtitle('CNN Features')
p2 <- ggplot(sift.feature, aes(x=X2, y=X3, color=factor(label)))+
geom_point(alpha=0.7) +
coord_fixed(ratio = 0.5) +
ggtitle('SIFT Features')
multiplot(p1,p2,cols=2)
p1 <- ggplot(cnn.feature, aes(x=X2, y=X3, color=factor(label)))+
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('CNN Features')
p1 <- ggplot(cnn.feature, aes(x=X2, y=X3, color=factor(label)))+
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('CNN Features')
p2 <- ggplot(sift.feature, aes(x=X2, y=X3, color=factor(label)))+
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('SIFT Features')
multiplot(p1,p2,cols=2)
p1 <- ggplot(cnn.feature, aes(x=X2, y=X3, color=factor(label)))+
xlab('pc1')+
ylab('pc2')
multiplot(p1,p2,cols=2)
p1 <- ggplot(cnn.feature, aes(x=X2, y=X3, color=factor(label)))+
xlab('pc1')+
ylab('pc2') +
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('CNN Features')
multiplot(p1,p2,cols=2)
sift.feature$label <- c(rep('fried chicken',1000),rep('labradoodle',1000))
cnn.feature$label <- c(rep('fried chicken',1000),rep('labradoodle',1000))
p1 <- ggplot(cnn.feature, aes(x=X2, y=X3, color=factor(label)))+
xlab('pc1')+
ylab('pc2') +
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('CNN Features')
p2 <- ggplot(sift.feature, aes(x=X2, y=X3, color=factor(label)))+
xlab('pc1')+
ylab('pc2') +
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('SIFT Features')
multiplot(p1,p2,cols=2)
p2 <- ggplot(sift.feature, aes(x=X2, y=X3, color=label))+
xlab('pc1')+
ylab('pc2') +
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('SIFT Features')
multiplot(p1,p2,cols=2)
p1 <- ggplot(cnn.feature, aes(x=X2, y=X3, color=label))+
xlab('pc1')+
ylab('pc2') +
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('CNN Features')
p2 <- ggplot(sift.feature, aes(x=X2, y=X3, color=label))+
xlab('pc1')+
ylab('pc2') +
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('SIFT Features')
multiplot(p1,p2,cols=2)
p2 <- ggplot(sift.feature, aes(x=X2, y=X3, color=label))+
xlab('pc1')+
ylab('pc2') +
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('SIFT Features')
p1 <- ggplot(cnn.feature, aes(x=X2, y=X3, color=label))+
xlab('pc1')+
ylab('pc2') +
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('CNN Features')
p2 <- ggplot(sift.feature, aes(x=X1, y=X2, color=label))+
xlab('pc1')+
ylab('pc2') +
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('SIFT Features')
multiplot(p1,p2,cols=2)
multiplot(p2,p1,cols=2)
library(data.table)
library(ggplot2)
source('../lib/multiplot.R')
sift.feature <- fread('../data/sift_features_1100.csv')
cnn.feature <- fread('../data/cnn_features_350.csv')
sift.feature <- data.frame(t(sift.feature))
cnn.feature <- data.frame(t(cnn.feature))
sift.feature$label <- c(rep('fried chicken',1000),rep('labradoodle',1000))
cnn.feature$label <- c(rep('fried chicken',1000),rep('labradoodle',1000))
p1 <- ggplot(cnn.feature, aes(x=X2, y=X3, color=label))+
xlab('pc1')+
ylab('pc2') +
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('CNN Features')
p2 <- ggplot(sift.feature, aes(x=X1, y=X2, color=label))+
xlab('pc1')+
ylab('pc2') +
geom_point(alpha=0.7) +
coord_fixed(ratio = 1) +
ggtitle('SIFT Features')
multiplot(p2,p1,cols=2)
